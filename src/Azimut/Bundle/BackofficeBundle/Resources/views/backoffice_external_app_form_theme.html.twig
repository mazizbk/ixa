{#
# @author: Yoann Le Crom <yoann.lecrom@abstractive.fr>
# date:    2018-04-05 15:41:08
#}

{% use 'AzimutFormExtraBundle::form_div_layout.html.twig' %}

{% use 'bootstrap_3_layout.html.twig' with
    form_widget_simple as base_form_widget_simple,
    textarea_widget as base_textarea_widget
%}

{% block tinymce_config_widget %}
{% spaceless %}
    {% if configs is defined %}
        {% if script_url is defined %}
            <script>
                if(0 == $(document).find('head script[src="{{ asset(script_url) }}"]').length) {
                    var scriptElt = document.createElement("script");
                    scriptElt.src = "{{ asset(script_url) }}";
                    $("head").append(scriptElt);
                }
            </script>
        {% endif %}

        {% if configs.script_url is defined %}
            {% stylesheets filter='less,cssrewrite,assetdirectory' package='build' output='tinymce_content_css.css'
                '@tinymce_css_content'
            %}
                {% set configs = configs|merge({
                    "content_css": asset_url
                }) %}
            {% endstylesheets %}
        {% endif %}

        {% set configs = configs|merge({
            "selector": "#" ~  id
        }) %}

        {% set attr = attr|merge({'class': attr.class|default('') ~ ' tinymce'}) %}
        <script>
            $(document).ready(function() {
                var tinymceConfig = {{ configs|json_encode|raw }};

                // Load Mediacenter plugin only if current page is in iframe
                if (window.self !== window.top) {
                    if (undefined == window.azimutExternalAppTinyMceSetup) {
                        console.error('Missing window.azimutExternalAppTinyMceSetup function, you need to include "iframe-mediacenter-tinymce-plugin-proxy.js" to be able to activate Mediacenter button in TinyMCE');
                    }
                    else {
                        tinymceConfig.setup = window.azimutExternalAppTinyMceSetup;
                    }
                }

                tinymce.init(tinymceConfig);
            });
        </script>

        {{ block('textarea_widget') }}
    {% endif %}
{% endspaceless %}
{% endblock tinymce_config_widget %}

{% block form_widget_simple %}
{% spaceless %}
    {# for i18n field, display an input addon with the locale name #}
    {% if attr['data-form-i18n'] is defined %}
        <div class="input-group">
            {{ block('base_form_widget_simple') }}
            <span class="input-group-addon">{{ attr['data-form-i18n']|upper }}</span>
        </div>
    {% else %}
        {{ block('base_form_widget_simple') }}
    {% endif %}
{% endspaceless %}
{% endblock form_widget_simple %}

{% block textarea_widget %}
{% spaceless %}
    {% set attr = attr|merge({'class': attr.class|default('') ~ ' form-control'}) %}

    {# for i18n field, display an input addon with the locale name #}
    {% if attr['data-form-i18n'] is defined %}
        <div class="input-group">
            {{ block('base_textarea_widget') }}
            <span class="input-group-addon">{{ attr['data-form-i18n']|upper }}</span>
        </div>
    {% else %}
        {{ block('base_textarea_widget') }}
    {% endif %}
{% endspaceless %}
{% endblock textarea_widget %}


{% block form_row -%}
    <div class="form-group{% if (not compound or force_error|default(false)) and not valid %} has-error{% endif %}" {% if attr['data-form-i18n'] is defined %}form-i18n-row="{{ attr['data-form-i18n']|upper }}"{% endif %}>
        {{- form_label(form) -}}
        {{- form_widget(form) -}}
        {{- form_errors(form) -}}
    </div>
{%- endblock form_row %}
